Package:
What is the purpose of __init__.py?
The application will exist in a package. In Python, a sub-directory that includes a __init__.py file is considered a package, and can be imported. When you import a package, the __init__.py executes and defines what symbols the package exposes to the outside world.

FLASK_APP:
How to run flask application?
How to export environmental variables?
How to persists exported variables?
What is a purpose of .flaskenv
Since environment variables aren't remembered across terminal sessions, you may find tedious to always have to set the FLASK_APP environment variable when you open a new terminal window. Starting with version 1.0, Flask allows you to register environment variables that you want to be automatically imported when you run the flask command. To use this option you have to install the python-dotenv package:
```console
(venv) $ pip install python-dotenv
```
Then you can just write the environment variable name and value in a file named .flaskenv located in the top-level directory of the project:
```
FLASK_APP=microblog.py
```

SECRET_KEY of FLASK_APP:
Why we need secret_key in flask?
The SECRET_KEY configuration variable that I added as the only configuration item is an important part in most Flask applications. Flask and some of its extensions use the value of the secret key as a cryptographic key, useful to generate signatures or tokens. The Flask-WTF extension uses it to protect web forms against a nasty attack called Cross-Site Request Forgery or CSRF (pronounced "seasurf"). As its name implies, the secret key is supposed to be secret, as the strength of the tokens and signatures generated with it depends on no person outside of the trusted maintainers of the application knowing it.